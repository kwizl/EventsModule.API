// <auto-generated />
using System;
using EventsModule.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventsModule.Data.Migrations
{
    [DbContext(typeof(EventsModuleMySQLContext))]
    [Migration("20231029175103_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EventsModule.Data.Models.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PK_Events_ID");

                    b.HasIndex("ID")
                        .IsUnique()
                        .HasDatabaseName("IX_Events_ID");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasDatabaseName("IX_Events_Title");

                    b.HasIndex("UserID");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("EventsModule.Data.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("ID")
                        .HasName("PK_Users_ID");

                    b.HasIndex("ID")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_ID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Name");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateCreated = new DateTime(2023, 10, 29, 20, 51, 3, 581, DateTimeKind.Local).AddTicks(8662),
                            DateModified = new DateTime(2023, 10, 29, 20, 51, 3, 581, DateTimeKind.Local).AddTicks(8671),
                            Description = "Testing API",
                            Name = "Tester"
                        });
                });

            modelBuilder.Entity("EventsModule.Data.Models.Event", b =>
                {
                    b.HasOne("EventsModule.Data.Models.User", null)
                        .WithMany("Events")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EventsModule.Data.Models.User", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
